///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class BooksModelDocs {
/*
{
  "key": "/works/OL24757979W",
  "type": "work",
  "seed": [
    "/books/OL32873185M"
  ],
  "title": "Uyuyan Güzel",
  "title_suggest": "Uyuyan Güzel",
  "title_sort": "Uyuyan Güzel",
  "edition_count": 1,
  "edition_key": [
    "OL32873185M"
  ],
  "publish_date": [
    "2009"
  ],
  "publish_year": [
    2009
  ],
  "first_publish_year": 2009,
  "number_of_pages_median": 340,
  "publish_place": [
    "Cağaloğlu, İstanbul"
  ],
  "oclc": [
    "815457333"
  ],
  "contributor": [
    "Hartirnaz, Nurten"
  ],
  "lcc": [
    "PS-3525.00000000.I486 S63187 2009"
  ],
  "isbn": [
    "9944425990"
  ],
  "last_modified_i": 1673755637,
  "ebook_count_i": 1,
  "ebook_access": "borrowable",
  "has_fulltext": true,
  "public_scan_b": false,
  "ia": [
    "uyuyanguzel0000macd"
  ],
  "ia_collection": [
    "inlibrary"
  ],
  "ia_collection_s": "inlibrary;internetarchivebooks;printdisabled",
  "lending_edition_s": "OL32873185M",
  "lending_identifier_s": "uyuyanguzel0000macd",
  "printdisabled_s": "OL32873185M",
  "cover_edition_key": "OL32873185M",
  "cover_i": 11505680,
  "publisher": [
    "Bilge kültür sanat"
  ],
  "language": [
    "tur"
  ],
  "author_key": [
    "OL342146A"
  ],
  "author_name": [
    "Ross Macdonald"
  ],
  "author_alternative_name": [
    "Ross MacDonald"
  ],
  "subject": [
    "Lew Archer (Fictitious character)"
  ],
  "ia_box_id": [
    "IA40177804"
  ],
  "publisher_facet": [
    "Bilge kültür sanat"
  ],
  "subject_facet": [
    "Fiction"
  ],
  "_version_": 1759770870579986400,
  "lcc_sort": "PS-3525.00000000.I486 S63187 2009",
  "author_facet": [
    "OL342146A Ross Macdonald"
  ],
  "subject_key": [
    "fiction"
  ]
} 
*/

  String? key;
  String? type;
  List<String?>? seed;
  String? title;
  String? titleSuggest;
  String? titleSort;
  int? editionCount;
  List<String?>? editionKey;
  List<String?>? publishDate;
  List<int?>? publishYear;
  int? firstPublishYear;
  int? numberOfPagesMedian;
  List<String?>? publishPlace;
  List<String?>? oclc;
  List<String?>? contributor;
  List<String?>? lcc;
  List<String?>? isbn;
  int? lastModifiedI;
  int? ebookCountI;
  String? ebookAccess;
  bool? hasFulltext;
  bool? publicScanB;
  List<String?>? ia;
  List<String?>? iaCollection;
  String? iaCollectionS;
  String? lendingEditionS;
  String? lendingIdentifierS;
  String? printdisabledS;
  String? coverEditionKey;
  int? coverI;
  List<String?>? publisher;
  List<String?>? language;
  List<String?>? authorKey;
  List<String?>? authorName;
  List<String?>? authorAlternativeName;
  List<String?>? subject;
  List<String?>? iaBoxId;
  List<String?>? publisherFacet;
  List<String?>? subjectFacet;
  int? Version_;
  String? lccSort;
  List<String?>? authorFacet;
  List<String?>? subjectKey;

  BooksModelDocs({
    this.key,
    this.type,
    this.seed,
    this.title,
    this.titleSuggest,
    this.titleSort,
    this.editionCount,
    this.editionKey,
    this.publishDate,
    this.publishYear,
    this.firstPublishYear,
    this.numberOfPagesMedian,
    this.publishPlace,
    this.oclc,
    this.contributor,
    this.lcc,
    this.isbn,
    this.lastModifiedI,
    this.ebookCountI,
    this.ebookAccess,
    this.hasFulltext,
    this.publicScanB,
    this.ia,
    this.iaCollection,
    this.iaCollectionS,
    this.lendingEditionS,
    this.lendingIdentifierS,
    this.printdisabledS,
    this.coverEditionKey,
    this.coverI,
    this.publisher,
    this.language,
    this.authorKey,
    this.authorName,
    this.authorAlternativeName,
    this.subject,
    this.iaBoxId,
    this.publisherFacet,
    this.subjectFacet,
    this.Version_,
    this.lccSort,
    this.authorFacet,
    this.subjectKey,
  });
  BooksModelDocs.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    type = json['type']?.toString();
    if (json['seed'] != null) {
      final v = json['seed'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      seed = arr0;
    }
    title = json['title']?.toString();
    titleSuggest = json['title_suggest']?.toString();
    titleSort = json['title_sort']?.toString();
    editionCount = json['edition_count']?.toInt();
    if (json['edition_key'] != null) {
      final v = json['edition_key'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      editionKey = arr0;
    }
    if (json['publish_date'] != null) {
      final v = json['publish_date'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      publishDate = arr0;
    }
    if (json['publish_year'] != null) {
      final v = json['publish_year'];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      publishYear = arr0;
    }
    firstPublishYear = json['first_publish_year']?.toInt();
    numberOfPagesMedian = json['number_of_pages_median']?.toInt();
    if (json['publish_place'] != null) {
      final v = json['publish_place'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      publishPlace = arr0;
    }
    if (json['oclc'] != null) {
      final v = json['oclc'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      oclc = arr0;
    }
    if (json['contributor'] != null) {
      final v = json['contributor'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      contributor = arr0;
    }
    if (json['lcc'] != null) {
      final v = json['lcc'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      lcc = arr0;
    }
    if (json['isbn'] != null) {
      final v = json['isbn'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      isbn = arr0;
    }
    lastModifiedI = json['last_modified_i']?.toInt();
    ebookCountI = json['ebook_count_i']?.toInt();
    ebookAccess = json['ebook_access']?.toString();
    hasFulltext = json['has_fulltext'];
    publicScanB = json['public_scan_b'];
    if (json['ia'] != null) {
      final v = json['ia'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      ia = arr0;
    }
    if (json['ia_collection'] != null) {
      final v = json['ia_collection'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      iaCollection = arr0;
    }
    iaCollectionS = json['ia_collection_s']?.toString();
    lendingEditionS = json['lending_edition_s']?.toString();
    lendingIdentifierS = json['lending_identifier_s']?.toString();
    printdisabledS = json['printdisabled_s']?.toString();
    coverEditionKey = json['cover_edition_key']?.toString();
    coverI = json['cover_i']?.toInt();
    if (json['publisher'] != null) {
      final v = json['publisher'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      publisher = arr0;
    }
    if (json['language'] != null) {
      final v = json['language'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      language = arr0;
    }
    if (json['author_key'] != null) {
      final v = json['author_key'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      authorKey = arr0;
    }
    if (json['author_name'] != null) {
      final v = json['author_name'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      authorName = arr0;
    }
    if (json['author_alternative_name'] != null) {
      final v = json['author_alternative_name'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      authorAlternativeName = arr0;
    }
    if (json['subject'] != null) {
      final v = json['subject'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      subject = arr0;
    }
    if (json['ia_box_id'] != null) {
      final v = json['ia_box_id'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      iaBoxId = arr0;
    }
    if (json['publisher_facet'] != null) {
      final v = json['publisher_facet'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      publisherFacet = arr0;
    }
    if (json['subject_facet'] != null) {
      final v = json['subject_facet'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      subjectFacet = arr0;
    }
    Version_ = json['_version_']?.toInt();
    lccSort = json['lcc_sort']?.toString();
    if (json['author_facet'] != null) {
      final v = json['author_facet'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      authorFacet = arr0;
    }
    if (json['subject_key'] != null) {
      final v = json['subject_key'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      subjectKey = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['type'] = type;
    if (seed != null) {
      final v = seed;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['seed'] = arr0;
    }
    data['title'] = title;
    data['title_suggest'] = titleSuggest;
    data['title_sort'] = titleSort;
    data['edition_count'] = editionCount;
    if (editionKey != null) {
      final v = editionKey;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['edition_key'] = arr0;
    }
    if (publishDate != null) {
      final v = publishDate;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['publish_date'] = arr0;
    }
    if (publishYear != null) {
      final v = publishYear;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['publish_year'] = arr0;
    }
    data['first_publish_year'] = firstPublishYear;
    data['number_of_pages_median'] = numberOfPagesMedian;
    if (publishPlace != null) {
      final v = publishPlace;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['publish_place'] = arr0;
    }
    if (oclc != null) {
      final v = oclc;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['oclc'] = arr0;
    }
    if (contributor != null) {
      final v = contributor;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['contributor'] = arr0;
    }
    if (lcc != null) {
      final v = lcc;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['lcc'] = arr0;
    }
    if (isbn != null) {
      final v = isbn;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['isbn'] = arr0;
    }
    data['last_modified_i'] = lastModifiedI;
    data['ebook_count_i'] = ebookCountI;
    data['ebook_access'] = ebookAccess;
    data['has_fulltext'] = hasFulltext;
    data['public_scan_b'] = publicScanB;
    if (ia != null) {
      final v = ia;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['ia'] = arr0;
    }
    if (iaCollection != null) {
      final v = iaCollection;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['ia_collection'] = arr0;
    }
    data['ia_collection_s'] = iaCollectionS;
    data['lending_edition_s'] = lendingEditionS;
    data['lending_identifier_s'] = lendingIdentifierS;
    data['printdisabled_s'] = printdisabledS;
    data['cover_edition_key'] = coverEditionKey;
    data['cover_i'] = coverI;
    if (publisher != null) {
      final v = publisher;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['publisher'] = arr0;
    }
    if (language != null) {
      final v = language;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['language'] = arr0;
    }
    if (authorKey != null) {
      final v = authorKey;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['author_key'] = arr0;
    }
    if (authorName != null) {
      final v = authorName;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['author_name'] = arr0;
    }
    if (authorAlternativeName != null) {
      final v = authorAlternativeName;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['author_alternative_name'] = arr0;
    }
    if (subject != null) {
      final v = subject;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['subject'] = arr0;
    }
    if (iaBoxId != null) {
      final v = iaBoxId;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['ia_box_id'] = arr0;
    }
    if (publisherFacet != null) {
      final v = publisherFacet;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['publisher_facet'] = arr0;
    }
    if (subjectFacet != null) {
      final v = subjectFacet;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['subject_facet'] = arr0;
    }
    data['_version_'] = Version_;
    data['lcc_sort'] = lccSort;
    if (authorFacet != null) {
      final v = authorFacet;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['author_facet'] = arr0;
    }
    if (subjectKey != null) {
      final v = subjectKey;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['subject_key'] = arr0;
    }
    return data;
  }
}

class BooksModel {
/*
{
  "numFound": 2015,
  "start": 0,
  "numFoundExact": true,
  "docs": [
    {
      "key": "/works/OL24757979W",
      "type": "work",
      "seed": [
        "/books/OL32873185M"
      ],
      "title": "Uyuyan Güzel",
      "title_suggest": "Uyuyan Güzel",
      "title_sort": "Uyuyan Güzel",
      "edition_count": 1,
      "edition_key": [
        "OL32873185M"
      ],
      "publish_date": [
        "2009"
      ],
      "publish_year": [
        2009
      ],
      "first_publish_year": 2009,
      "number_of_pages_median": 340,
      "publish_place": [
        "Cağaloğlu, İstanbul"
      ],
      "oclc": [
        "815457333"
      ],
      "contributor": [
        "Hartirnaz, Nurten"
      ],
      "lcc": [
        "PS-3525.00000000.I486 S63187 2009"
      ],
      "isbn": [
        "9944425990"
      ],
      "last_modified_i": 1673755637,
      "ebook_count_i": 1,
      "ebook_access": "borrowable",
      "has_fulltext": true,
      "public_scan_b": false,
      "ia": [
        "uyuyanguzel0000macd"
      ],
      "ia_collection": [
        "inlibrary"
      ],
      "ia_collection_s": "inlibrary;internetarchivebooks;printdisabled",
      "lending_edition_s": "OL32873185M",
      "lending_identifier_s": "uyuyanguzel0000macd",
      "printdisabled_s": "OL32873185M",
      "cover_edition_key": "OL32873185M",
      "cover_i": 11505680,
      "publisher": [
        "Bilge kültür sanat"
      ],
      "language": [
        "tur"
      ],
      "author_key": [
        "OL342146A"
      ],
      "author_name": [
        "Ross Macdonald"
      ],
      "author_alternative_name": [
        "Ross MacDonald"
      ],
      "subject": [
        "Lew Archer (Fictitious character)"
      ],
      "ia_box_id": [
        "IA40177804"
      ],
      "publisher_facet": [
        "Bilge kültür sanat"
      ],
      "subject_facet": [
        "Fiction"
      ],
      "_version_": 1759770870579986400,
      "lcc_sort": "PS-3525.00000000.I486 S63187 2009",
      "author_facet": [
        "OL342146A Ross Macdonald"
      ],
      "subject_key": [
        "fiction"
      ]
    }
  ],
  "num_found": 2015,
  "q": "language:tur",
  "offset": null
} 
*/

  int? numFound;
  int? start;
  bool? numFoundExact;
  List<BooksModelDocs?>? docs;

  String? q;
  String? offset;

  BooksModel({
    this.numFound,
    this.start,
    this.numFoundExact,
    this.docs,
    this.q,
    this.offset,
  });
  BooksModel.fromJson(Map<String, dynamic> json) {
    numFound = json['numFound']?.toInt();
    start = json['start']?.toInt();
    numFoundExact = json['numFoundExact'];
    if (json['docs'] != null) {
      final v = json['docs'];
      final arr0 = <BooksModelDocs>[];
      v.forEach((v) {
        arr0.add(BooksModelDocs.fromJson(v));
      });
      docs = arr0;
    }
    numFound = json['num_found']?.toInt();
    q = json['q']?.toString();
    offset = json['offset']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['numFound'] = numFound;
    data['start'] = start;
    data['numFoundExact'] = numFoundExact;
    if (docs != null) {
      final v = docs;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['docs'] = arr0;
    }
    data['num_found'] = numFound;
    data['q'] = q;
    data['offset'] = offset;
    return data;
  }
}
