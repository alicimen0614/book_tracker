///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class InfoWithIsbnLastModified {
/*
{
  "type": "/type/datetime",
  "value": "2023-03-05T12:32:09.754701"
} 
*/

  String? type;
  String? value;

  InfoWithIsbnLastModified({
    this.type,
    this.value,
  });
  InfoWithIsbnLastModified.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    value = json['value']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['value'] = value;
    return data;
  }
}

class InfoWithIsbnCreated {
/*
{
  "type": "/type/datetime",
  "value": "2022-09-02T05:53:46.517231"
} 
*/

  String? type;
  String? value;

  InfoWithIsbnCreated({
    this.type,
    this.value,
  });
  InfoWithIsbnCreated.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    value = json['value']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['value'] = value;
    return data;
  }
}

class InfoWithIsbnIdentifiers {
/*
{
  "goodreads": [
    "15441980"
  ]
} 
*/

  List<String?>? goodreads;

  InfoWithIsbnIdentifiers({
    this.goodreads,
  });
  InfoWithIsbnIdentifiers.fromJson(Map<String, dynamic> json) {
    if (json['goodreads'] != null) {
      final v = json['goodreads'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      goodreads = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (goodreads != null) {
      final v = goodreads;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['goodreads'] = arr0;
    }
    return data;
  }
}

class InfoWithIsbnWorks {
/*
{
  "key": "/works/OL262463W"
} 
*/

  String? key;

  InfoWithIsbnWorks({
    this.key,
  });
  InfoWithIsbnWorks.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    return data;
  }
}

class InfoWithIsbnTableOfContents {
/*
{
  "level": 0,
  "label": "",
  "title": "Silver blaze",
  "pagenum": ""
} 
*/

  int? level;
  String? label;
  String? title;
  String? pagenum;

  InfoWithIsbnTableOfContents({
    this.level,
    this.label,
    this.title,
    this.pagenum,
  });
  InfoWithIsbnTableOfContents.fromJson(Map<String, dynamic> json) {
    level = json['level']?.toInt();
    label = json['label']?.toString();
    title = json['title']?.toString();
    pagenum = json['pagenum']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['level'] = level;
    data['label'] = label;
    data['title'] = title;
    data['pagenum'] = pagenum;
    return data;
  }
}

class InfoWithIsbnDescription {
/*
{
  "type": "/type/text",
  "value": "Eleven of the famous cases narrated by Dr Watson, including the disappearance and presumed death of Sherlock Holmes at the Reichenbach Falls in deadly combat with Professor Moriarty. Sir Arthur Conan Doyle — who was born in Edinburgh in 1859 — not only gained world-wide fame for his remarkable detective stories, but he was the first to warn against the U- Boat war, and was respons- ible for the steel helmet and inflatable life jacket being introduced into the Army and Navy."
} 
*/

  String? type;
  String? value;

  InfoWithIsbnDescription({
    this.type,
    this.value,
  });
  InfoWithIsbnDescription.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    value = json['value']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['value'] = value;
    return data;
  }
}

class InfoWithIsbnAuthors {
/*
{
  "key": "/authors/OL471614A"
} 
*/

  String? key;

  InfoWithIsbnAuthors({
    this.key,
  });
  InfoWithIsbnAuthors.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    return data;
  }
}

class InfoWithIsbnLanguages {
/*
{
  "key": "/languages/eng"
} 
*/

  String? key;

  InfoWithIsbnLanguages({
    this.key,
  });
  InfoWithIsbnLanguages.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    return data;
  }
}

class InfoWithIsbnType {
/*
{
  "key": "/type/edition"
} 
*/

  String? key;

  InfoWithIsbnType({
    this.key,
  });
  InfoWithIsbnType.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    return data;
  }
}

class InfoWithIsbn {
/*
{
  "type": {
    "key": "/type/edition"
  },
  "publish_date": "1966-09",
  "publish_country": "enk",
  "languages": [
    {
      "key": "/languages/eng"
    }
  ],
  "authors": [
    {
      "key": "/authors/OL471614A"
    }
  ],
  "other_titles": [
    "Sherlock Holmes"
  ],
  "description": {
    "type": "/type/text",
    "value": "Eleven of the famous cases narrated by Dr Watson, including the disappearance and presumed death of Sherlock Holmes at the Reichenbach Falls in deadly combat with Professor Moriarty. Sir Arthur Conan Doyle — who was born in Edinburgh in 1859 — not only gained world-wide fame for his remarkable detective stories, but he was the first to warn against the U- Boat war, and was respons- ible for the steel helmet and inflatable life jacket being introduced into the Army and Navy."
  },
  "table_of_contents": [
    {
      "level": 0,
      "label": "",
      "title": "Silver blaze",
      "pagenum": ""
    }
  ],
  "subjects": [
    "Large type books"
  ],
  "subject_places": [
    "England"
  ],
  "title": "The Memoirs of Sherlock Holmes",
  "by_statement": "Sir Arthur Conan Doyle",
  "publishers": [
    "Ulverscroft"
  ],
  "publish_places": [
    "Leicester"
  ],
  "pagination": "452 pages",
  "number_of_pages": 452,
  "source_records": [
    "ia:memoirsofsherloc0000doyl_x1d8"
  ],
  "full_title": "The memoirs of Sherlock Holmes",
  "covers": [
    13379312
  ],
  "works": [
    {
      "key": "/works/OL262463W"
    }
  ],
  "key": "/books/OL39479118M",
  "local_id": [
    "urn:bwbsku:O8-CCN-135"
  ],
  "identifiers": {
    "goodreads": [
      "15441980"
    ]
  },
  "classifications": {},
  "edition_name": "Large print edition",
  "physical_format": "Hardcover",
  "ocaid": "memoirsofsherloc0000doyl_x1d8",
  "isbn_10": [
    "0854565736"
  ],
  "isbn_13": [
    "9780854565733"
  ],
  "oclc_numbers": [
    "2383119"
  ],
  "dewey_decimal_class": [
    "FIC"
  ],
  "latest_revision": 7,
  "revision": 7,
  "created": {
    "type": "/type/datetime",
    "value": "2022-09-02T05:53:46.517231"
  },
  "last_modified": {
    "type": "/type/datetime",
    "value": "2023-03-05T12:32:09.754701"
  }
} 
*/

  InfoWithIsbnType? type;
  String? publishDate;
  String? publishCountry;
  List<InfoWithIsbnLanguages?>? languages;
  List<InfoWithIsbnAuthors?>? authors;
  List<String?>? otherTitles;
  InfoWithIsbnDescription? description;
  List<InfoWithIsbnTableOfContents?>? tableOfContents;
  List<String?>? subjects;
  List<String?>? subjectPlaces;
  String? title;
  String? byStatement;
  List<String?>? publishers;
  List<String?>? publishPlaces;
  String? pagination;
  int? numberOfPages;
  List<String?>? sourceRecords;
  String? fullTitle;
  List<int?>? covers;
  List<InfoWithIsbnWorks?>? works;
  String? key;
  List<String?>? localId;
  InfoWithIsbnIdentifiers? identifiers;

  String? editionName;
  String? physicalFormat;
  String? ocaid;
  List<String?>? isbn_10;
  List<String?>? isbn_13;
  List<String?>? oclcNumbers;
  List<String?>? deweyDecimalClass;
  int? latestRevision;
  int? revision;
  InfoWithIsbnCreated? created;
  InfoWithIsbnLastModified? lastModified;

  InfoWithIsbn({
    this.type,
    this.publishDate,
    this.publishCountry,
    this.languages,
    this.authors,
    this.otherTitles,
    this.description,
    this.tableOfContents,
    this.subjects,
    this.subjectPlaces,
    this.title,
    this.byStatement,
    this.publishers,
    this.publishPlaces,
    this.pagination,
    this.numberOfPages,
    this.sourceRecords,
    this.fullTitle,
    this.covers,
    this.works,
    this.key,
    this.localId,
    this.identifiers,
    this.editionName,
    this.physicalFormat,
    this.ocaid,
    this.isbn_10,
    this.isbn_13,
    this.oclcNumbers,
    this.deweyDecimalClass,
    this.latestRevision,
    this.revision,
    this.created,
    this.lastModified,
  });
  InfoWithIsbn.fromJson(Map<String, dynamic> json) {
    type =
        (json['type'] != null) ? InfoWithIsbnType.fromJson(json['type']) : null;
    publishDate = json['publish_date']?.toString();
    publishCountry = json['publish_country']?.toString();
    if (json['languages'] != null) {
      final v = json['languages'];
      final arr0 = <InfoWithIsbnLanguages>[];
      v.forEach((v) {
        arr0.add(InfoWithIsbnLanguages.fromJson(v));
      });
      languages = arr0;
    }
    if (json['authors'] != null) {
      final v = json['authors'];
      final arr0 = <InfoWithIsbnAuthors>[];
      v.forEach((v) {
        arr0.add(InfoWithIsbnAuthors.fromJson(v));
      });
      authors = arr0;
    }
    if (json['other_titles'] != null) {
      final v = json['other_titles'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      otherTitles = arr0;
    }
    description = (json['description'] != null)
        ? InfoWithIsbnDescription.fromJson(json['description'])
        : null;
    if (json['table_of_contents'] != null) {
      final v = json['table_of_contents'];
      final arr0 = <InfoWithIsbnTableOfContents>[];
      v.forEach((v) {
        arr0.add(InfoWithIsbnTableOfContents.fromJson(v));
      });
      tableOfContents = arr0;
    }
    if (json['subjects'] != null) {
      final v = json['subjects'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      subjects = arr0;
    }
    if (json['subject_places'] != null) {
      final v = json['subject_places'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      subjectPlaces = arr0;
    }
    title = json['title']?.toString();
    byStatement = json['by_statement']?.toString();
    if (json['publishers'] != null) {
      final v = json['publishers'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      publishers = arr0;
    }
    if (json['publish_places'] != null) {
      final v = json['publish_places'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      publishPlaces = arr0;
    }
    pagination = json['pagination']?.toString();
    numberOfPages = json['number_of_pages']?.toInt();
    if (json['source_records'] != null) {
      final v = json['source_records'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      sourceRecords = arr0;
    }
    fullTitle = json['full_title']?.toString();
    if (json['covers'] != null) {
      final v = json['covers'];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      covers = arr0;
    }
    if (json['works'] != null) {
      final v = json['works'];
      final arr0 = <InfoWithIsbnWorks>[];
      v.forEach((v) {
        arr0.add(InfoWithIsbnWorks.fromJson(v));
      });
      works = arr0;
    }
    key = json['key']?.toString();
    if (json['local_id'] != null) {
      final v = json['local_id'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      localId = arr0;
    }
    identifiers = (json['identifiers'] != null)
        ? InfoWithIsbnIdentifiers.fromJson(json['identifiers'])
        : null;
    editionName = json['edition_name']?.toString();
    physicalFormat = json['physical_format']?.toString();
    ocaid = json['ocaid']?.toString();
    if (json['isbn_10'] != null) {
      final v = json['isbn_10'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      isbn_10 = arr0;
    }
    if (json['isbn_13'] != null) {
      final v = json['isbn_13'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      isbn_13 = arr0;
    }
    if (json['oclc_numbers'] != null) {
      final v = json['oclc_numbers'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      oclcNumbers = arr0;
    }
    if (json['dewey_decimal_class'] != null) {
      final v = json['dewey_decimal_class'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      deweyDecimalClass = arr0;
    }
    latestRevision = json['latest_revision']?.toInt();
    revision = json['revision']?.toInt();
    created = (json['created'] != null)
        ? InfoWithIsbnCreated.fromJson(json['created'])
        : null;
    lastModified = (json['last_modified'] != null)
        ? InfoWithIsbnLastModified.fromJson(json['last_modified'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (type != null) {
      data['type'] = type!.toJson();
    }
    data['publish_date'] = publishDate;
    data['publish_country'] = publishCountry;
    if (languages != null) {
      final v = languages;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['languages'] = arr0;
    }
    if (authors != null) {
      final v = authors;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['authors'] = arr0;
    }
    if (otherTitles != null) {
      final v = otherTitles;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['other_titles'] = arr0;
    }
    if (description != null) {
      data['description'] = description!.toJson();
    }
    if (tableOfContents != null) {
      final v = tableOfContents;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['table_of_contents'] = arr0;
    }
    if (subjects != null) {
      final v = subjects;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['subjects'] = arr0;
    }
    if (subjectPlaces != null) {
      final v = subjectPlaces;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['subject_places'] = arr0;
    }
    data['title'] = title;
    data['by_statement'] = byStatement;
    if (publishers != null) {
      final v = publishers;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['publishers'] = arr0;
    }
    if (publishPlaces != null) {
      final v = publishPlaces;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['publish_places'] = arr0;
    }
    data['pagination'] = pagination;
    data['number_of_pages'] = numberOfPages;
    if (sourceRecords != null) {
      final v = sourceRecords;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['source_records'] = arr0;
    }
    data['full_title'] = fullTitle;
    if (covers != null) {
      final v = covers;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['covers'] = arr0;
    }
    if (works != null) {
      final v = works;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['works'] = arr0;
    }
    data['key'] = key;
    if (localId != null) {
      final v = localId;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['local_id'] = arr0;
    }
    if (identifiers != null) {
      data['identifiers'] = identifiers!.toJson();
    }
    data['edition_name'] = editionName;
    data['physical_format'] = physicalFormat;
    data['ocaid'] = ocaid;
    if (isbn_10 != null) {
      final v = isbn_10;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['isbn_10'] = arr0;
    }
    if (isbn_13 != null) {
      final v = isbn_13;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['isbn_13'] = arr0;
    }
    if (oclcNumbers != null) {
      final v = oclcNumbers;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['oclc_numbers'] = arr0;
    }
    if (deweyDecimalClass != null) {
      final v = deweyDecimalClass;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['dewey_decimal_class'] = arr0;
    }
    data['latest_revision'] = latestRevision;
    data['revision'] = revision;
    if (created != null) {
      data['created'] = created!.toJson();
    }
    if (lastModified != null) {
      data['last_modified'] = lastModified!.toJson();
    }
    return data;
  }
}
