///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class CategoryBooksWorksAvailability {
/*
{
  "status": "open",
  "available_to_browse": false,
  "available_to_borrow": false,
  "available_to_waitlist": false,
  "is_printdisabled": false,
  "is_readable": true,
  "is_lendable": false,
  "is_previewable": true,
  "identifier": "gulliverstravels0000unse_k3z1",
  "isbn": null,
  "oclc": null,
  "openlibrary_work": "OL20600W",
  "openlibrary_edition": "OL37814930M",
  "last_loan_date": null,
  "num_waitlist": null,
  "last_waitlist_date": null,
  "is_restricted": false,
  "is_browseable": false,
  "__src__": "core.models.lending.get_availability"
} 
*/

  String? status;
  bool? availableToBrowse;
  bool? availableToBorrow;
  bool? availableToWaitlist;
  bool? isPrintdisabled;
  bool? isReadable;
  bool? isLendable;
  bool? isPreviewable;
  String? identifier;
  String? isbn;
  String? oclc;
  String? openlibraryWork;
  String? openlibraryEdition;
  String? lastLoanDate;
  String? numWaitlist;
  String? lastWaitlistDate;
  bool? isRestricted;
  bool? isBrowseable;

  CategoryBooksWorksAvailability({
    this.status,
    this.availableToBrowse,
    this.availableToBorrow,
    this.availableToWaitlist,
    this.isPrintdisabled,
    this.isReadable,
    this.isLendable,
    this.isPreviewable,
    this.identifier,
    this.isbn,
    this.oclc,
    this.openlibraryWork,
    this.openlibraryEdition,
    this.lastLoanDate,
    this.numWaitlist,
    this.lastWaitlistDate,
    this.isRestricted,
    this.isBrowseable,
  });
  CategoryBooksWorksAvailability.fromJson(Map<String, dynamic> json) {
    status = json['status']?.toString();
    availableToBrowse = json['available_to_browse'];
    availableToBorrow = json['available_to_borrow'];
    availableToWaitlist = json['available_to_waitlist'];
    isPrintdisabled = json['is_printdisabled'];
    isReadable = json['is_readable'];
    isLendable = json['is_lendable'];
    isPreviewable = json['is_previewable'];
    identifier = json['identifier']?.toString();
    isbn = json['isbn']?.toString();
    oclc = json['oclc']?.toString();
    openlibraryWork = json['openlibrary_work']?.toString();
    openlibraryEdition = json['openlibrary_edition']?.toString();
    lastLoanDate = json['last_loan_date']?.toString();
    numWaitlist = json['num_waitlist']?.toString();
    lastWaitlistDate = json['last_waitlist_date']?.toString();
    isRestricted = json['is_restricted'];
    isBrowseable = json['is_browseable'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['available_to_browse'] = availableToBrowse;
    data['available_to_borrow'] = availableToBorrow;
    data['available_to_waitlist'] = availableToWaitlist;
    data['is_printdisabled'] = isPrintdisabled;
    data['is_readable'] = isReadable;
    data['is_lendable'] = isLendable;
    data['is_previewable'] = isPreviewable;
    data['identifier'] = identifier;
    data['isbn'] = isbn;
    data['oclc'] = oclc;
    data['openlibrary_work'] = openlibraryWork;
    data['openlibrary_edition'] = openlibraryEdition;
    data['last_loan_date'] = lastLoanDate;
    data['num_waitlist'] = numWaitlist;
    data['last_waitlist_date'] = lastWaitlistDate;
    data['is_restricted'] = isRestricted;
    data['is_browseable'] = isBrowseable;
    return data;
  }
}

class CategoryBooksWorksAuthors {
/*
{
  "key": "/authors/OL24522A",
  "name": "Jonathan Swift"
} 
*/

  String? key;
  String? name;

  CategoryBooksWorksAuthors({
    this.key,
    this.name,
  });
  CategoryBooksWorksAuthors.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    name = json['name']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['name'] = name;
    return data;
  }
}

class CategoryBooksWorks {
/*
{
  "key": "/works/OL20600W",
  "title": "Gulliver's Travels",
  "edition_count": 1652,
  "cover_id": 12717083,
  "cover_edition_key": "OL26445784M",
  "subject": [
    "YA"
  ],
  "ia_collection": [
    "California-State-Suggested-Reading"
  ],
  "lendinglibrary": false,
  "printdisabled": true,
  "lending_edition": "OL37814930M",
  "lending_identifier": "gulliverstravels0000unse_k3z1",
  "authors": [
    {
      "key": "/authors/OL24522A",
      "name": "Jonathan Swift"
    }
  ],
  "first_publish_year": 1726,
  "ia": "gulliverstravels0000unse_k3z1",
  "public_scan": true,
  "has_fulltext": true,
  "availability": {
    "status": "open",
    "available_to_browse": false,
    "available_to_borrow": false,
    "available_to_waitlist": false,
    "is_printdisabled": false,
    "is_readable": true,
    "is_lendable": false,
    "is_previewable": true,
    "identifier": "gulliverstravels0000unse_k3z1",
    "isbn": null,
    "oclc": null,
    "openlibrary_work": "OL20600W",
    "openlibrary_edition": "OL37814930M",
    "last_loan_date": null,
    "num_waitlist": null,
    "last_waitlist_date": null,
    "is_restricted": false,
    "is_browseable": false,
    "__src__": "core.models.lending.get_availability"
  }
} 
*/

  String? key;
  String? title;
  int? editionCount;
  int? coverId;
  String? coverEditionKey;
  List<String?>? subject;
  List<String?>? iaCollection;
  bool? lendinglibrary;
  bool? printdisabled;
  String? lendingEdition;
  String? lendingIdentifier;
  List<CategoryBooksWorksAuthors?>? authors;
  int? firstPublishYear;
  String? ia;
  bool? publicScan;
  bool? hasFulltext;
  CategoryBooksWorksAvailability? availability;

  CategoryBooksWorks({
    this.key,
    this.title,
    this.editionCount,
    this.coverId,
    this.coverEditionKey,
    this.subject,
    this.iaCollection,
    this.lendinglibrary,
    this.printdisabled,
    this.lendingEdition,
    this.lendingIdentifier,
    this.authors,
    this.firstPublishYear,
    this.ia,
    this.publicScan,
    this.hasFulltext,
    this.availability,
  });
  CategoryBooksWorks.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    title = json['title']?.toString();
    editionCount = json['edition_count']?.toInt();
    coverId = json['cover_id']?.toInt();
    coverEditionKey = json['cover_edition_key']?.toString();
    if (json['subject'] != null) {
      final v = json['subject'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      subject = arr0;
    }
    if (json['ia_collection'] != null) {
      final v = json['ia_collection'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      iaCollection = arr0;
    }
    lendinglibrary = json['lendinglibrary'];
    printdisabled = json['printdisabled'];
    lendingEdition = json['lending_edition']?.toString();
    lendingIdentifier = json['lending_identifier']?.toString();
    if (json['authors'] != null) {
      final v = json['authors'];
      final arr0 = <CategoryBooksWorksAuthors>[];
      v.forEach((v) {
        arr0.add(CategoryBooksWorksAuthors.fromJson(v));
      });
      authors = arr0;
    }
    firstPublishYear = json['first_publish_year']?.toInt();
    ia = json['ia']?.toString();
    publicScan = json['public_scan'];
    hasFulltext = json['has_fulltext'];
    availability = (json['availability'] != null)
        ? CategoryBooksWorksAvailability.fromJson(json['availability'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['title'] = title;
    data['edition_count'] = editionCount;
    data['cover_id'] = coverId;
    data['cover_edition_key'] = coverEditionKey;
    if (subject != null) {
      final v = subject;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['subject'] = arr0;
    }
    if (iaCollection != null) {
      final v = iaCollection;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['ia_collection'] = arr0;
    }
    data['lendinglibrary'] = lendinglibrary;
    data['printdisabled'] = printdisabled;
    data['lending_edition'] = lendingEdition;
    data['lending_identifier'] = lendingIdentifier;
    if (authors != null) {
      final v = authors;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['authors'] = arr0;
    }
    data['first_publish_year'] = firstPublishYear;
    data['ia'] = ia;
    data['public_scan'] = publicScan;
    data['has_fulltext'] = hasFulltext;
    if (availability != null) {
      data['availability'] = availability!.toJson();
    }
    return data;
  }
}

class CategoryBooks {
/*
{
  "key": "/subjects/adventure",
  "name": "adventure",
  "subject_type": "subject",
  "work_count": 1585,
  "works": [
    {
      "key": "/works/OL20600W",
      "title": "Gulliver's Travels",
      "edition_count": 1652,
      "cover_id": 12717083,
      "cover_edition_key": "OL26445784M",
      "subject": [
        "YA"
      ],
      "ia_collection": [
        "California-State-Suggested-Reading"
      ],
      "lendinglibrary": false,
      "printdisabled": true,
      "lending_edition": "OL37814930M",
      "lending_identifier": "gulliverstravels0000unse_k3z1",
      "authors": [
        {
          "key": "/authors/OL24522A",
          "name": "Jonathan Swift"
        }
      ],
      "first_publish_year": 1726,
      "ia": "gulliverstravels0000unse_k3z1",
      "public_scan": true,
      "has_fulltext": true,
      "availability": {
        "status": "open",
        "available_to_browse": false,
        "available_to_borrow": false,
        "available_to_waitlist": false,
        "is_printdisabled": false,
        "is_readable": true,
        "is_lendable": false,
        "is_previewable": true,
        "identifier": "gulliverstravels0000unse_k3z1",
        "isbn": null,
        "oclc": null,
        "openlibrary_work": "OL20600W",
        "openlibrary_edition": "OL37814930M",
        "last_loan_date": null,
        "num_waitlist": null,
        "last_waitlist_date": null,
        "is_restricted": false,
        "is_browseable": false,
        "__src__": "core.models.lending.get_availability"
      }
    }
  ]
} 
*/

  String? key;
  String? name;
  String? subjectType;
  int? workCount;
  List<CategoryBooksWorks?>? works;

  CategoryBooks({
    this.key,
    this.name,
    this.subjectType,
    this.workCount,
    this.works,
  });
  CategoryBooks.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    name = json['name']?.toString();
    subjectType = json['subject_type']?.toString();
    workCount = json['work_count']?.toInt();
    if (json['works'] != null) {
      final v = json['works'];
      final arr0 = <CategoryBooksWorks>[];
      v.forEach((v) {
        arr0.add(CategoryBooksWorks.fromJson(v));
      });
      works = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['name'] = name;
    data['subject_type'] = subjectType;
    data['work_count'] = workCount;
    if (works != null) {
      final v = works;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['works'] = arr0;
    }
    return data;
  }
}
